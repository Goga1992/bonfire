// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: audiomixer_service.proto

package transcode

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioMixerClient is the client API for AudioMixer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioMixerClient interface {
	StartAudioSlot(ctx context.Context, in *StartAudioSlotRequest, opts ...grpc.CallOption) (*AudioSlotInfo, error)
	StopAudioSlot(ctx context.Context, in *StopAudioSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type audioMixerClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioMixerClient(cc grpc.ClientConnInterface) AudioMixerClient {
	return &audioMixerClient{cc}
}

func (c *audioMixerClient) StartAudioSlot(ctx context.Context, in *StartAudioSlotRequest, opts ...grpc.CallOption) (*AudioSlotInfo, error) {
	out := new(AudioSlotInfo)
	err := c.cc.Invoke(ctx, "/AudioMixer/StartAudioSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioMixerClient) StopAudioSlot(ctx context.Context, in *StopAudioSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/AudioMixer/StopAudioSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioMixerServer is the server API for AudioMixer service.
// All implementations must embed UnimplementedAudioMixerServer
// for forward compatibility
type AudioMixerServer interface {
	StartAudioSlot(context.Context, *StartAudioSlotRequest) (*AudioSlotInfo, error)
	StopAudioSlot(context.Context, *StopAudioSlotRequest) (*empty.Empty, error)
	mustEmbedUnimplementedAudioMixerServer()
}

// UnimplementedAudioMixerServer must be embedded to have forward compatible implementations.
type UnimplementedAudioMixerServer struct {
}

func (UnimplementedAudioMixerServer) StartAudioSlot(context.Context, *StartAudioSlotRequest) (*AudioSlotInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAudioSlot not implemented")
}
func (UnimplementedAudioMixerServer) StopAudioSlot(context.Context, *StopAudioSlotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAudioSlot not implemented")
}
func (UnimplementedAudioMixerServer) mustEmbedUnimplementedAudioMixerServer() {}

// UnsafeAudioMixerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioMixerServer will
// result in compilation errors.
type UnsafeAudioMixerServer interface {
	mustEmbedUnimplementedAudioMixerServer()
}

func RegisterAudioMixerServer(s grpc.ServiceRegistrar, srv AudioMixerServer) {
	s.RegisterService(&AudioMixer_ServiceDesc, srv)
}

func _AudioMixer_StartAudioSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAudioSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioMixerServer).StartAudioSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AudioMixer/StartAudioSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioMixerServer).StartAudioSlot(ctx, req.(*StartAudioSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioMixer_StopAudioSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAudioSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioMixerServer).StopAudioSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AudioMixer/StopAudioSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioMixerServer).StopAudioSlot(ctx, req.(*StopAudioSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioMixer_ServiceDesc is the grpc.ServiceDesc for AudioMixer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioMixer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AudioMixer",
	HandlerType: (*AudioMixerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartAudioSlot",
			Handler:    _AudioMixer_StartAudioSlot_Handler,
		},
		{
			MethodName: "StopAudioSlot",
			Handler:    _AudioMixer_StopAudioSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audiomixer_service.proto",
}
