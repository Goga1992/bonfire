// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: videoscaler_service.proto

package transcode

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoScalerClient is the client API for VideoScaler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoScalerClient interface {
	StartVideoSlot(ctx context.Context, in *StartVideoSlotRequest, opts ...grpc.CallOption) (*VideoSlotInfo, error)
	SetSlotBranchActive(ctx context.Context, in *SetSlotBranchActiveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ForceKeyFrame(ctx context.Context, in *ForceKeyFrameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StopVideoSlot(ctx context.Context, in *StopVideoSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type videoScalerClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoScalerClient(cc grpc.ClientConnInterface) VideoScalerClient {
	return &videoScalerClient{cc}
}

func (c *videoScalerClient) StartVideoSlot(ctx context.Context, in *StartVideoSlotRequest, opts ...grpc.CallOption) (*VideoSlotInfo, error) {
	out := new(VideoSlotInfo)
	err := c.cc.Invoke(ctx, "/VideoScaler/StartVideoSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScalerClient) SetSlotBranchActive(ctx context.Context, in *SetSlotBranchActiveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/VideoScaler/SetSlotBranchActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScalerClient) ForceKeyFrame(ctx context.Context, in *ForceKeyFrameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/VideoScaler/ForceKeyFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoScalerClient) StopVideoSlot(ctx context.Context, in *StopVideoSlotRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/VideoScaler/StopVideoSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoScalerServer is the server API for VideoScaler service.
// All implementations must embed UnimplementedVideoScalerServer
// for forward compatibility
type VideoScalerServer interface {
	StartVideoSlot(context.Context, *StartVideoSlotRequest) (*VideoSlotInfo, error)
	SetSlotBranchActive(context.Context, *SetSlotBranchActiveRequest) (*empty.Empty, error)
	ForceKeyFrame(context.Context, *ForceKeyFrameRequest) (*empty.Empty, error)
	StopVideoSlot(context.Context, *StopVideoSlotRequest) (*empty.Empty, error)
	mustEmbedUnimplementedVideoScalerServer()
}

// UnimplementedVideoScalerServer must be embedded to have forward compatible implementations.
type UnimplementedVideoScalerServer struct {
}

func (UnimplementedVideoScalerServer) StartVideoSlot(context.Context, *StartVideoSlotRequest) (*VideoSlotInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVideoSlot not implemented")
}
func (UnimplementedVideoScalerServer) SetSlotBranchActive(context.Context, *SetSlotBranchActiveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSlotBranchActive not implemented")
}
func (UnimplementedVideoScalerServer) ForceKeyFrame(context.Context, *ForceKeyFrameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceKeyFrame not implemented")
}
func (UnimplementedVideoScalerServer) StopVideoSlot(context.Context, *StopVideoSlotRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVideoSlot not implemented")
}
func (UnimplementedVideoScalerServer) mustEmbedUnimplementedVideoScalerServer() {}

// UnsafeVideoScalerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoScalerServer will
// result in compilation errors.
type UnsafeVideoScalerServer interface {
	mustEmbedUnimplementedVideoScalerServer()
}

func RegisterVideoScalerServer(s grpc.ServiceRegistrar, srv VideoScalerServer) {
	s.RegisterService(&VideoScaler_ServiceDesc, srv)
}

func _VideoScaler_StartVideoSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVideoSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScalerServer).StartVideoSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoScaler/StartVideoSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScalerServer).StartVideoSlot(ctx, req.(*StartVideoSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScaler_SetSlotBranchActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSlotBranchActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScalerServer).SetSlotBranchActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoScaler/SetSlotBranchActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScalerServer).SetSlotBranchActive(ctx, req.(*SetSlotBranchActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScaler_ForceKeyFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceKeyFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScalerServer).ForceKeyFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoScaler/ForceKeyFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScalerServer).ForceKeyFrame(ctx, req.(*ForceKeyFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoScaler_StopVideoSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVideoSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoScalerServer).StopVideoSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoScaler/StopVideoSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoScalerServer).StopVideoSlot(ctx, req.(*StopVideoSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoScaler_ServiceDesc is the grpc.ServiceDesc for VideoScaler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoScaler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoScaler",
	HandlerType: (*VideoScalerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartVideoSlot",
			Handler:    _VideoScaler_StartVideoSlot_Handler,
		},
		{
			MethodName: "SetSlotBranchActive",
			Handler:    _VideoScaler_SetSlotBranchActive_Handler,
		},
		{
			MethodName: "ForceKeyFrame",
			Handler:    _VideoScaler_ForceKeyFrame_Handler,
		},
		{
			MethodName: "StopVideoSlot",
			Handler:    _VideoScaler_StopVideoSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoscaler_service.proto",
}
